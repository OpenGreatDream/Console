using System;
using System.Runtime.InteropServices;
using static MinConsole.MinConsoleNativeStructs;
using ConsoleColor = MinConsole.MinConsoleNativeStructs.ConsoleColor;
using ConsoleKeyInfo = MinConsole.MinConsoleNativeStructs.ConsoleKeyInfo;

namespace MinConsole
{
    //This class is auto generated by NativeFunctionTranslator.
    public static class MinConsoleNativeFuncs
    {
        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static void MinStructTest(out MCIAudio s);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinStructTest2();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static MCIAudio MinStructTest3();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinMCISendString(string str);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinMCISendStringEx(string str, out string returnStr);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinMCIGetErrorString();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinPlaySound(string path, bool repeatPlay);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinInitMCIAudio(string path);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static void MinDeinitMCIAudio(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinPlayMCIAudio(ref MCIAudio mciAudio, bool repeat, bool wait);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinPlayMCIAudioEx(ref MCIAudio mciAudio, bool repeat, bool wait, int from, int to);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinStopMCIAudio(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinPauseMCIAudio(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinResumeMCIAudio(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static int MinGetMCIAudioVolume(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetMCIAudioVolume(ref MCIAudio mciAudio, int volume);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static int MinGetMCIAudioPosition(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetMCIAudioPosition(ref MCIAudio mciAudio, int position);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static int MinGetMCIAudioSpeed(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetMCIAudioSpeed(ref MCIAudio mciAudio, int speed);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static MCIAudioMode MinGetMCIAudioMode(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetMCIAudioIsPlaying(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetMCIAudioIsOver(ref MCIAudio mciAudio);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetMCIAudioIsOverEx(ref MCIAudio mciAudio, int length);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinCreatAudioPool(string path, int allocCount);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static void MinDestroyAudioPool(IntPtr audioPool);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinPlayOneShot(IntPtr audioPool, double volumeScale);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static void MinCleanAudioPool(IntPtr audioPool);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinReadFromClipboard();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteToClipboard(string data);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsLegacyConsole();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinEnableLegacyConsole(bool enable);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinDeleteConsoleRegistry();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWTIsDefaultConsole();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ushort MinConsoleColorToUshort(ConsoleColor foreColor, ConsoleColor backColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleColorPair MinUshortToConsoleColor(ushort u);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleSession MinAllocConsole();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinFreeConsole();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinGetConsoleWindow();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinGetStdHandle(StdHandleType type);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleSession MinInitConsoleSession();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinEnableConsoleVT(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static Color24 MinGetConsolePalette(IntPtr consoleOutput, uint index);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsolePalette(IntPtr consoleOutput, uint index, Color24 color);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleInputMode MinGetConsoleInputMode(IntPtr consoleInput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleInputMode(IntPtr consoleInput, ConsoleInputMode mode);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleOutputMode MinGetConsoleOutputMode(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleOutputMode(IntPtr consoleOutput, ConsoleOutputMode mode);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleMode MinGetConsoleMode(IntPtr consoleInput, IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleMode(IntPtr consoleInput, IntPtr consoleOutput, ConsoleMode consoleMode);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleFont MinGetConsoleFont(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleFont(IntPtr consoleOutput, ConsoleFont consoleFont);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetConsoleWindowSize(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleWindowSize(IntPtr consoleOutput, POINT size);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetConsoleBufferSize(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleBufferSize(IntPtr consoleOutput, POINT size);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static CheckSizeResult MinCheckSize(IntPtr consoleOutput, POINT size);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static COORD MinGetLargestConsoleWindowSize(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static void MinSetConsoleWindowAndBufferSize(IntPtr consoleOutput, POINT size);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleColor MinGetConsoleForeColor(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleColor MinGetConsoleBackColor(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleForeColor(IntPtr consoleOutput, ConsoleColor foreColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleBackColor(IntPtr consoleOutput, ConsoleColor backColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinResetConsoleColor(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static COORD MinGetConsoleCursorPos(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleCursorPos(IntPtr consoleOutput, COORD pos);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinReadConsole(IntPtr consoleInput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinReadConsoleInput(IntPtr consoleInput, OnReadConsoleMouseInputRecord callback1, OnReadConsoleKeyboardInputRecord callback2, OnConsoleOutputBufferChanged callback3);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinReadConsoleOneInput(IntPtr consoleInput, OnReadConsoleMouseInputRecord callback1, OnReadConsoleKeyboardInputRecord callback2, OnConsoleOutputBufferChanged callback3);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinKeyAvailable(IntPtr consoleInput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleKeyInfo MinReadKey(IntPtr consoleInput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteConsole(IntPtr consoleOutput, string buffer);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteConsoleOutput(IntPtr consoleOutput, CHAR_INFO[] charInfos, short x, short y, short width, short height);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteConsoleOutputAttribute(IntPtr consoleOutput, ushort[] att, int attCount, COORD pos);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteConsoleOutputCharacter(IntPtr consoleOutput, string str, int charCount, COORD pos);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWrite1(IntPtr consoleOutput, string str);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWrite2(IntPtr consoleOutput, string str, ConsoleColor foreColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWrite3(IntPtr consoleOutput, string str, ConsoleColor foreColor, ConsoleColor backColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteLine(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteLine1(IntPtr consoleOutput, string str);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteLine2(IntPtr consoleOutput, string str, ConsoleColor foreColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinWriteLine3(IntPtr consoleOutput, string str, ConsoleColor foreColor, ConsoleColor backColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinANSIWrite2(IntPtr consoleOutput, string str, Color24 foreColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinANSIWrite3(IntPtr consoleOutput, string str, Color24 foreColor, Color24 backColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinANSIWrite4(IntPtr consoleOutput, string str, Color24 foreColor, Color24 backColor, bool under_score);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinANSIWriteLine2(IntPtr consoleOutput, string str, Color24 foreColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinANSIWriteLine3(IntPtr consoleOutput, string str, Color24 foreColor, Color24 backColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinANSIWriteLine4(IntPtr consoleOutput, string str, Color24 foreColor, Color24 backColor, bool under_score);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinCreateConsoleScreenBuffer();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleActiveScreenBuffer(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinCloseConsoleScreenBuffer(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinCreateFile(ConsoleFile fileMode);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Ansi)]
        public extern static bool MinWriteFile(IntPtr handle, string str);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Ansi)]
        public extern static string MinReadFile(IntPtr handle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static CharWidth MinGetCharWidth(IntPtr consoleWindow, IntPtr consoleOutput, char c);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static int MinGetStringWidth(IntPtr consoleWindow, IntPtr consoleOutput, string str);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinGetTitle();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetTitle(string title);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetConsoleCursorVisible(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleCursorVisible(IntPtr consoleOutput, bool visible);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinClear(IntPtr consoleOutput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetConsoleCtrlHandler(PHANDLER_ROUTINE handler, bool add);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static ConsoleType MinGetConsoleType();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinRefreshScreen(IntPtr consoleOutput, char c, ushort att);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinFlushConsoleInputBuffer(IntPtr consoleInput);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinToShortPathName(string path);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinPutPixel(IntPtr hwnd, int x, int y, Color24 color);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetKey(int virtualKey);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetKeyDown(int virtualKey);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetKeyUp(int virtualKey);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetKeyPressed(int virtualKey);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetKeyState(int virtualKey);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static int MinGetHitKey();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinCheckMouseAxis();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinResetMouseAxis();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static int MinGetMouseAxis(MouseAxis axis);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static void MinCheckKeyboardEx();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetKeyEx(int virtualKey);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetKeyDownEx(int virtualKey);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetKeyUpEx(int virtualKey);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static MessageBoxResult MinShowMessageBox(string text, string title, MessageBoxButtons buttons, MessageBoxDefaultButton defButton, MessageBoxIcon iconType);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static uint MinGetRandomValue(uint minimum, uint maximum);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static MinTimer MinInitTimer();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinStartTimer(ref MinTimer timer);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinStopTimer(ref MinTimer timer);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static double MinTimeTimer(ref MinTimer timer, int iterations);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static float MinMilliToMinute(int milliSecond);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static int MinMinuteToMilli(float minute);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTResetStyle();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTForeColor(Color24 foreColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTBackColor(Color24 backColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTColor(Color24 foreColor, Color24 backColor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTUnderline(bool underLine);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTWindowTitle(string title);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTCursorPos(COORD pos);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTCursorVisible(bool visible);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTTerminalColor(int color);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTTerminalForeColor(TerminalColor tcolor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTTerminalBackColor(TerminalColor tcolor);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTTerminalSize(COORD size);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTPaletteColor(int index, byte r, byte g, byte b);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinVTSupport();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static void MinVTEnableMouseInput();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static void MinVTDisableMouseInput();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static COORD MinVTGetCursorPos();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static string MinVTGetDeviceAttributes();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinGetForegroundWindow();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetWindowPos(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetWindowPos(IntPtr windowHandle, POINT pos);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetWindowSize(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetWindowSize(IntPtr windowHandle, POINT size);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetDesktopSize();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetClientSize(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetMousePos();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetMappedMousePos(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetMouseInClient(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetWindowInFocus(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetCenterPosOfWindowInDesktop(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static POINT MinGetCenterPosOfWindow(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetWindowMenuVisibility(IntPtr windowHandle, bool visible);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinMaximizeWindow(IntPtr windowHandle, bool maximize);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static byte MinGetWindowAlpha(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinSetWindowAlpha(IntPtr windowHandle, byte alpha);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsMinimized(IntPtr windowHandle);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static IntPtr MinGetExeInstance();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinDeleteMenu(IntPtr windowHandle, bool allowResizing, bool allowClose, bool allowMaximize, bool allowMinimize);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinDisableCursor();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinInitWinSocket();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinReleaseWinSocket();

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinGetWinVersion(out uint MajorVer, out uint MinorVer, out uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows2000(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindowsXP(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindowsVista(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows7(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows8(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows8point1(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows8Or8point1(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows11(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows2000OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindowsXPOrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindowsVistaOrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows7OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows8Or8point1OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version1511OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version1607OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10CreatorsOrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10FallCreatorsOrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version1803OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version1809OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version1903OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version1909OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version2004OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version20H2OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version21H1OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows10Version21H2OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

        [DllImport("MinConsoleNative.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true, CharSet = CharSet.Unicode)]
        public extern static bool MinIsWindows11OrLater(uint MajorVer, uint MinorVer, uint BuildNumber);

    }
}
